CREATE TABLE IF NOT EXISTS rentals_per_month (
	number_rentals INT,
	rental_date TIMESTAMP,
	store_id INT,
	store_address VARCHAR(40)
);

SELECT * FROM rentals_per_month;

------------------------------------------------------------
INSERT INTO rentals_per_month(number_rentals,rental_date,store_id,store_address)
SELECT	
	rental.rental_id, rental.rental_date, store.store_id, address.address
FROM
	rental
INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id
INNER JOIN store ON store.store_id = inventory.store_id
INNER JOIN address ON address.address_id = store.address_id

ORDER BY rental_date desc;

------------------------------------------------------------

------------------------------------------------------------

------------------------------------------------------------
CREATE TABLE IF NOT EXISTS summary_rentals (
	store_address VARCHAR(40),
	store_id INT,
	number_rentals INT
);

SELECT * FROM summary_rentals;
------------------------------------------------------------

CREATE OR REPLACE FUNCTION rentalsNum(store int)
	RETURNS SETOF integer AS
$func$
SELECT COUNT(number_rentals)
FROM rentals_per_month
WHERE rental_date::date = date '2006-02-14'
AND store_id = $1;
$func$		LANGUAGE sql;

------------------------------------------------------------




INSERT INTO summary_rentals(number_rentals, store_id, store_address)
SELECT distinct rentalsNum(rentals_per_month.store_id), store_id, store_address
FROM 
	rentals_per_month
ORDER BY
	store_id;

------------------------------------------------------------
-- CREATING THE FUNCTION-------------------------------------------------------------------------------------------------
---------------------Updating the summary table-----------------------------------------------------------------

CREATE FUNCTION summary_table_refresh()
RETURNS TRIGGER 
LANGUAGE plpgsql
AS $$ 
BEGIN

DELETE FROM summary_rentals;
-- this will empty the summary table. 

INSERT INTO summary_rentals(number_rentals, store_id, store_address)
SELECT distinct rentalsNum(rentals_per_month.store_id), store_id, store_address
FROM 
	rentals_per_month
ORDER BY
	store_id;
RETURN NEW;
END; $$

--This function will refresh the summary table with data taken from the rentals_per_month table

-- CREATING THE TRIGGER---------------------------------------------------------------------------------------------

CREATE TRIGGER summary_rentals_refresh
AFTER INSERT ON rentals_per_month
FOR EACH STATEMENT
EXECUTE PROCEDURE summary_table_refresh();




--CREATING THE PROCEDURE -----------------------------------------------------------------------------------------


CREATE PROCEDURE refresh()
LANGUAGE plpgsql
AS $$ 
BEGIN

DELETE FROM rentals_per_month; -- this will empty the detailed table on any existing info.
DELETE FROM summary_rentals;

INSERT INTO rentals_per_month(number_rentals,rental_date,store_id,store_address)
SELECT	
	rental.rental_id, rental.rental_date, store.store_id, address.address
FROM
	rental
INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id
INNER JOIN store ON store.store_id = inventory.store_id
INNER JOIN address ON address.address_id = store.address_id

ORDER BY rental_date desc;

INSERT INTO summary_rentals(number_rentals, store_id, store_address)
SELECT distinct rentalsNum(rentals_per_month.store_id), store_id, store_address
FROM 
	rentals_per_month
ORDER BY
	store_id;
END;$$



-- To call stored procedure
-- CALL refresh();

------------------------------------------------------------
