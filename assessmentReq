Section A: 
	Real world business report basis: Which store has the most film rentals?
A1: 
Describe the data used for the report: The data I’ve chosen to use for my report includes the rental_id, rental_date, store_id, and store_address. These values should provide the necessary perspective to calculate which store has the most film rentals at a chosen time. (I chose 2006-02-14)
A2:
The tables that will provide this data are the rentals, inventory, store, and address tables.
A3:
The specific fields to be included in the detailed table are the rental date, the rental_id, the store_id, and the store_address.
The specific fields to be included in the summary table will be the store_id, store_address, and the number_rentals.
A4:
The rental_id field will need transformation by way of an aggregate COUNT function that will count the number of rows returned for the selected time for each store_id.
(I chose 2006-02-14)
A5: 	
Detailed report business use: Provides a large overview of rentals, their ids, the timestamp of incidence, store id, and store address.
Summary report business use: Provides a filtered view of exactly how many rentals each store has at a selected time. (I chose 2006-02-14)
A6:
	The report should be refreshed daily to remain relevant to stakeholders, as new rentals
will have been conducted each day.
B:
   Write a SQL code that creates the tables to hold your report sections.
CREATE TABLE IF NOT EXISTS rentals_per_month (
	number_rentals INT,
	rental_date TIMESTAMP,
	store_id INT,
	store_address VARCHAR(40)
);
CREATE TABLE IF NOT EXISTS summary_rentals (
		store_address VARCHAR(40),
		store_id INT,
		number_rentals INT
);
C:  
Write a SQL query that will extract the raw data needed for the Detailed section of your report from the source database and verify the data’s accuracy
INSERT INTO rentals_per_month(number_rentals,rental_date,store_id,store_address)
SELECT	
		rental.rental_id, rental.rental_date, store.store_id, address.address
FROM
		rental
INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id
INNER JOIN store ON store.store_id = inventory.store_id
INNER JOIN address ON address.address_id = store.address_id

ORDER BY rental_date desc;

	SELECT * FROM rentals_per_month;
------------------------------------------------------------
D:
	Write code for function(s) that perform the transformation(s) you identified in A4.
CREATE OR REPLACE FUNCTION rentalsNum(store int)
	RETURNS SETOF integer AS
$func$
SELECT COUNT(number_rentals)
FROM rentals_per_month
WHERE rental_date::date = date '2006-02-14'
AND store_id = $1;
$func$		LANGUAGE sql;

--This functions date could be changed to reflect the desired date by the business.
--e.g. changing date to now() to populate the table by rentals per store each day.

--INSERT DATA INTO SUMMARY TABLE USING TRANSFORMATION FUNCTION—

INSERT INTO summary_rentals(number_rentals, store_id, store_address)
SELECT distinct rentalsNum(rentals_per_month.store_id), store_id, store_address
FROM 
		rentals_per_month
ORDER BY
		store_id;

	SELECT * FROM summary_rentals;
------------------------------------------------------------


E:
Write a SQL code that creates a trigger on the detailed table of the report that will continually update the summary table as data is added to the detailed table.

CREATE FUNCTION summary_table_refresh()
RETURNS TRIGGER 
LANGUAGE plpgsql
AS $$ 
BEGIN

DELETE FROM summary_rentals;
-- this will empty the summary table. 

INSERT INTO summary_rentals(number_rentals, store_id, store_address)
SELECT DISTINCT rentalsNum(rentals_per_month.store_id), store_id, store_address
FROM 
		rentals_per_month
ORDER BY
		store_id;
RETURN NEW;
END; $$

--This function will refresh the summary table with data taken from the rentals_per_month table

-- CREATE THE TRIGGER---------------------------------------------------------------------------------------------
CREATE TRIGGER summary_rentals_refresh
AFTER INSERT ON rentals_per_month
FOR EACH STATEMENT
EXECUTE PROCEDURE summary_table_refresh();

F:
Create a stored procedure that can be used to refresh the data in both your detailed and summary tables. The procedure should clear the contents of the detailed and summary tables and perform the ETL load process from part C and include comments that identify how often the stored procedure should be executed.
1.  Explain how the stored procedure can be run on a schedule to ensure data freshness

CREATE PROCEDURE refresh()
LANGUAGE plpgsql
AS $$ 
BEGIN

DELETE FROM rentals_per_month;
DELETE FROM summary_rentals;

INSERT INTO rentals_per_month(number_rentals,rental_date,store_id,store_address)
SELECT	
	rental.rental_id, rental.rental_date, store.store_id, address.address
FROM
	rental
INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id
INNER JOIN store ON store.store_id = inventory.store_id
INNER JOIN address ON address.address_id = store.address_id

ORDER BY rental_date desc;

INSERT INTO summary_rentals(number_rentals, store_id, store_address)
SELECT distinct rentalsNum(rentals_per_month.store_id), store_id, store_address
FROM 
	rentals_per_month
ORDER BY
	store_id;
END;$$

-- To call stored procedure
-- CALL refresh();

1: 
This procedure should be called every day to ensure data freshness and populate the number of rentals per store each day. As the function is called, the business could plot the rentals over the course of a month or year to better optimize sales.
